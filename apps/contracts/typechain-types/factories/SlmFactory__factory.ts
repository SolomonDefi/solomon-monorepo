/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SlmFactory, SlmFactoryInterface } from "../SlmFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_judge",
        type: "address",
      },
      {
        internalType: "address",
        name: "_slmToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "_masterContract",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "_slmDiscount",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "chargebackAddress",
        type: "address",
      },
    ],
    name: "ChargebackCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "escrowAddress",
        type: "address",
      },
    ],
    name: "EscrowCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "preorderAddress",
        type: "address",
      },
    ],
    name: "PreorderCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "merchant",
        type: "address",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
    ],
    name: "createChargeback",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "party1",
        type: "address",
      },
      {
        internalType: "address",
        name: "party2",
        type: "address",
      },
      {
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
    ],
    name: "createEscrow",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "merchant",
        type: "address",
      },
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "address",
        name: "paymentToken",
        type: "address",
      },
    ],
    name: "createPreorder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "judge",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "masterContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slmDiscount",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "slmToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f8e38038062000f8e833981810160405281019062000037919062000207565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360146101000a81548160ff021916908360ff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505062000279565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001918262000164565b9050919050565b620001a38162000184565b8114620001af57600080fd5b50565b600081519050620001c38162000198565b92915050565b600060ff82169050919050565b620001e181620001c9565b8114620001ed57600080fd5b50565b6000815190506200020181620001d6565b92915050565b600080600080608085870312156200022457620002236200015f565b5b60006200023487828801620001b2565b94505060206200024787828801620001b2565b93505060406200025a87828801620001b2565b92505060606200026d87828801620001f0565b91505092959194509250565b610d0580620002896000396000f3fe60806040526004361061007b5760003560e01c8063cd446e221161004e578063cd446e221461010e578063cef6452314610139578063f06f4e9b14610155578063f2fde38b146101805761007b565b80632c2d91c514610080578063573255f41461009c5780638703834c146100c7578063a1054f6b146100f2575b600080fd5b61009a6004803603810190610095919061087d565b6101a9565b005b3480156100a857600080fd5b506100b16104f6565b6040516100be91906108df565b60405180910390f35b3480156100d357600080fd5b506100dc61051c565b6040516100e991906108df565b60405180910390f35b61010c6004803603810190610107919061087d565b610542565b005b34801561011a57600080fd5b5061012361057f565b60405161013091906108df565b60405180910390f35b610153600480360381019061014e919061087d565b6105a5565b005b34801561016157600080fd5b5061016a6105e2565b6040516101779190610916565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a29190610931565b6105f5565b005b60006101d6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166107b0565b905060008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146103de5760008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161024a92919061095e565b60206040518083038186803b15801561026257600080fd5b505afa158015610276573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029a91906109bd565b9050600081116102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690610a47565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561034857600360149054906101000a900460ff1691505b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3387846040518463ffffffff1660e01b815260040161038593929190610a76565b602060405180830381600087803b15801561039f57600080fd5b505af11580156103b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d79190610ae5565b5050610422565b60003411610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041890610b5e565b60405180910390fd5b5b8173ffffffffffffffffffffffffffffffffffffffff16632ac5294b34600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868989876040518763ffffffff1660e01b8152600401610486959493929190610b7e565b6000604051808303818588803b15801561049f57600080fd5b505af11580156104b3573d6000803e3d6000fd5b50505050507fe9fbf8b8577c861e3d8d11594f5fb37e556e6dc62f73d411e31a495dc6899415826040516104e791906108df565b60405180910390a15050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7fdc172423e65e4eb718110c42ad3b66ac4b0a613e4d07bfb55f2477f2d1bf34eb600060405161057291906108df565b60405180910390a1505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7febd1d9e60dd076a72496c05dd3d7dd8ffe1b384563c27bf3e7fed0cc8efd2a5960006040516105d591906108df565b60405180910390a1505050565b600360149054906101000a900460ff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610c1d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156106f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ea90610caf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808260601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f092505050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061084a8261081f565b9050919050565b61085a8161083f565b811461086557600080fd5b50565b60008135905061087781610851565b92915050565b6000806000606084860312156108965761089561081a565b5b60006108a486828701610868565b93505060206108b586828701610868565b92505060406108c686828701610868565b9150509250925092565b6108d98161083f565b82525050565b60006020820190506108f460008301846108d0565b92915050565b600060ff82169050919050565b610910816108fa565b82525050565b600060208201905061092b6000830184610907565b92915050565b6000602082840312156109475761094661081a565b5b600061095584828501610868565b91505092915050565b600060408201905061097360008301856108d0565b61098060208301846108d0565b9392505050565b6000819050919050565b61099a81610987565b81146109a557600080fd5b50565b6000815190506109b781610991565b92915050565b6000602082840312156109d3576109d261081a565b5b60006109e1848285016109a8565b91505092915050565b600082825260208201905092915050565b7f416c6c6f77616e6365206d697373696e67000000000000000000000000000000600082015250565b6000610a316011836109ea565b9150610a3c826109fb565b602082019050919050565b60006020820190508181036000830152610a6081610a24565b9050919050565b610a7081610987565b82525050565b6000606082019050610a8b60008301866108d0565b610a9860208301856108d0565b610aa56040830184610a67565b949350505050565b60008115159050919050565b610ac281610aad565b8114610acd57600080fd5b50565b600081519050610adf81610ab9565b92915050565b600060208284031215610afb57610afa61081a565b5b6000610b0984828501610ad0565b91505092915050565b7f5061796d656e74206e6f742070726f7669646564000000000000000000000000600082015250565b6000610b486014836109ea565b9150610b5382610b12565b602082019050919050565b60006020820190508181036000830152610b7781610b3b565b9050919050565b600060a082019050610b9360008301886108d0565b610ba060208301876108d0565b610bad60408301866108d0565b610bba60608301856108d0565b610bc76080830184610907565b9695505050505050565b7f4f6e6c79206f776e657220697320616c6c6f77656420746f2063616c6c000000600082015250565b6000610c07601d836109ea565b9150610c1282610bd1565b602082019050919050565b60006020820190508181036000830152610c3681610bfa565b9050919050565b7f446f6e27742061737369676e206f776e65727368697020746f206e756c6c206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c996026836109ea565b9150610ca482610c3d565b604082019050919050565b60006020820190508181036000830152610cc881610c8c565b905091905056fea26469706673582212201b8e4deba5ff14b7782b5dec6f14c9b4ff3662abc34d084dc553ad7ab597f17164736f6c63430008090033";

type SlmFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SlmFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SlmFactory__factory extends ContractFactory {
  constructor(...args: SlmFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _judge: string,
    _slmToken: string,
    _masterContract: string,
    _slmDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SlmFactory> {
    return super.deploy(
      _judge,
      _slmToken,
      _masterContract,
      _slmDiscount,
      overrides || {}
    ) as Promise<SlmFactory>;
  }
  getDeployTransaction(
    _judge: string,
    _slmToken: string,
    _masterContract: string,
    _slmDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _judge,
      _slmToken,
      _masterContract,
      _slmDiscount,
      overrides || {}
    );
  }
  attach(address: string): SlmFactory {
    return super.attach(address) as SlmFactory;
  }
  connect(signer: Signer): SlmFactory__factory {
    return super.connect(signer) as SlmFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SlmFactoryInterface {
    return new utils.Interface(_abi) as SlmFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SlmFactory {
    return new Contract(address, _abi, signerOrProvider) as SlmFactory;
  }
}
