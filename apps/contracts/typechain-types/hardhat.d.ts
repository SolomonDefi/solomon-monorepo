/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "SlmJudgement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmJudgement__factory>;
    getContractFactory(
      name: "SlmShared",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmShared__factory>;
    getContractFactory(
      name: "SlmChargeback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmChargeback__factory>;
    getContractFactory(
      name: "SlmEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmEscrow__factory>;
    getContractFactory(
      name: "SlmFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmFactory__factory>;
    getContractFactory(
      name: "SlmPreorder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmPreorder__factory>;
    getContractFactory(
      name: "SlmStakerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmStakerManager__factory>;
    getContractFactory(
      name: "SlmStakerStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmStakerStorage__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "LockableToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockableToken__factory>;
    getContractFactory(
      name: "SlmToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SlmToken__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "SlmJudgement",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmJudgement>;
    getContractAt(
      name: "SlmShared",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmShared>;
    getContractAt(
      name: "SlmChargeback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmChargeback>;
    getContractAt(
      name: "SlmEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmEscrow>;
    getContractAt(
      name: "SlmFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmFactory>;
    getContractAt(
      name: "SlmPreorder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmPreorder>;
    getContractAt(
      name: "SlmStakerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmStakerManager>;
    getContractAt(
      name: "SlmStakerStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmStakerStorage>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "LockableToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockableToken>;
    getContractAt(
      name: "SlmToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SlmToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
