/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface SlmStakerStorageInterface extends ethers.utils.Interface {
  functions: {
    'addressLookup(uint256)': FunctionFragment
    'decreaseDisputeVoteCount(uint256,address,uint256)': FunctionFragment
    'decreaseOutstandingVotes(uint256,address,uint256)': FunctionFragment
    'decreaseStakeAmount(address,uint256,uint256)': FunctionFragment
    'decreaseVoteHistoryCount(uint256,address,uint256)': FunctionFragment
    'deleteUnstakedInfo(address,uint256,uint256)': FunctionFragment
    'disputeVoteCount(address,uint256)': FunctionFragment
    'getDisputeVoteCount(address,uint256)': FunctionFragment
    'getOutstandingVotes(address,uint256)': FunctionFragment
    'getStake(address,uint256)': FunctionFragment
    'getStakerPool(address)': FunctionFragment
    'getUnstakeCount(address,uint256)': FunctionFragment
    'getUnstakedAmount(address,uint256,uint256)': FunctionFragment
    'getUnstakedSLM(address,uint256)': FunctionFragment
    'getUnstakedTime(address,uint256,uint256)': FunctionFragment
    'getUserAddress(uint256)': FunctionFragment
    'getUserId(address)': FunctionFragment
    'getVoteEndTime(address)': FunctionFragment
    'getVoteHistoryCount(address,uint256)': FunctionFragment
    'increaseDisputeVoteCount(uint256,address,uint256)': FunctionFragment
    'increaseOutstandingVotes(uint256,address,uint256)': FunctionFragment
    'increaseStakeAmount(address,uint256,uint256)': FunctionFragment
    'increaseVoteHistoryCount(uint256,address,uint256)': FunctionFragment
    'outstandingVotes(address,uint256)': FunctionFragment
    'pushUnstakedInfo(address,uint256,uint256,uint256)': FunctionFragment
    'sendFunds(address,uint256)': FunctionFragment
    'setMinStake(uint256)': FunctionFragment
    'setStakerManager(address)': FunctionFragment
    'setUnstakePeriod(uint256)': FunctionFragment
    'setUserId(address,uint256)': FunctionFragment
    'setVoteEndTime(address,uint256)': FunctionFragment
    'stakerPool(address,uint256)': FunctionFragment
    'stakes(address,uint256)': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unstakePeriod()': FunctionFragment
    'unstakedSLM(address,uint256,uint256)': FunctionFragment
    'updateStakerPool(uint256[])': FunctionFragment
    'updateUnstakedInfo(address,uint256,uint256,uint256,uint256)': FunctionFragment
    'userIdList(address)': FunctionFragment
    'voteEndTimes(address)': FunctionFragment
    'voteHistoryCount(address,uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'addressLookup', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'decreaseDisputeVoteCount',
    values: [BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'decreaseOutstandingVotes',
    values: [BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'decreaseStakeAmount',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'decreaseVoteHistoryCount',
    values: [BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'deleteUnstakedInfo',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'disputeVoteCount',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getDisputeVoteCount',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getOutstandingVotes',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'getStake', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getStakerPool', values: [string]): string
  encodeFunctionData(
    functionFragment: 'getUnstakeCount',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getUnstakedAmount',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getUnstakedSLM',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'getUnstakedTime',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'getUserAddress', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getUserId', values: [string]): string
  encodeFunctionData(functionFragment: 'getVoteEndTime', values: [string]): string
  encodeFunctionData(
    functionFragment: 'getVoteHistoryCount',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseDisputeVoteCount',
    values: [BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseOutstandingVotes',
    values: [BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseStakeAmount',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'increaseVoteHistoryCount',
    values: [BigNumberish, string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'outstandingVotes',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'pushUnstakedInfo',
    values: [string, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'sendFunds',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'setMinStake', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setStakerManager', values: [string]): string
  encodeFunctionData(functionFragment: 'setUnstakePeriod', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'setUserId',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'setVoteEndTime',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'stakerPool',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'stakes', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'unstakePeriod', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'unstakedSLM',
    values: [string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'updateStakerPool',
    values: [BigNumberish[]],
  ): string
  encodeFunctionData(
    functionFragment: 'updateUnstakedInfo',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'userIdList', values: [string]): string
  encodeFunctionData(functionFragment: 'voteEndTimes', values: [string]): string
  encodeFunctionData(
    functionFragment: 'voteHistoryCount',
    values: [string, BigNumberish],
  ): string

  decodeFunctionResult(functionFragment: 'addressLookup', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseDisputeVoteCount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'decreaseOutstandingVotes',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'decreaseStakeAmount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'decreaseVoteHistoryCount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'deleteUnstakedInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disputeVoteCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getDisputeVoteCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getOutstandingVotes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStakerPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUnstakeCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUnstakedAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUnstakedSLM', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUnstakedTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVoteEndTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getVoteHistoryCount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseDisputeVoteCount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'increaseOutstandingVotes',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'increaseStakeAmount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'increaseVoteHistoryCount',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'outstandingVotes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pushUnstakedInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sendFunds', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setMinStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setStakerManager', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setUnstakePeriod', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setUserId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setVoteEndTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstakePeriod', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstakedSLM', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateStakerPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateUnstakedInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userIdList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'voteEndTimes', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'voteHistoryCount', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export class SlmStakerStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SlmStakerStorageInterface

  functions: {
    addressLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    decreaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    decreaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    decreaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    decreaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    deleteUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    disputeVoteCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getDisputeVoteCount(
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getOutstandingVotes(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getStake(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getStakerPool(
      managerAddress: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>

    getUnstakeCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUnstakedAmount(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUnstakedSLM(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUnstakedTime(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getUserId(walletAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    getVoteEndTime(dispute: string, overrides?: CallOverrides): Promise<[BigNumber]>

    getVoteHistoryCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    increaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    increaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    increaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    increaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    outstandingVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    pushUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    sendFunds(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setMinStake(
      newMinStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setStakerManager(
      newStakerManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setUnstakePeriod(
      periodDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setUserId(
      walletAddress: string,
      userId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setVoteEndTime(
      dispute: string,
      voteEndTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stakerPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    unstakePeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    unstakedSLM(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; time: BigNumber }>

    updateStakerPool(
      newStakerPool: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    updateUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    userIdList(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    voteEndTimes(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    voteHistoryCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>
  }

  addressLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  decreaseDisputeVoteCount(
    amount: BigNumberish,
    dispute: string,
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  decreaseOutstandingVotes(
    amount: BigNumberish,
    user: string,
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  decreaseStakeAmount(
    user: string,
    beneficiary: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  decreaseVoteHistoryCount(
    amount: BigNumberish,
    user: string,
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  deleteUnstakedInfo(
    user: string,
    beneficiary: BigNumberish,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  disputeVoteCount(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getDisputeVoteCount(
    dispute: string,
    beneficiary: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getOutstandingVotes(
    user: string,
    beneficiary: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStake(
    user: string,
    beneficiary: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getStakerPool(managerAddress: string, overrides?: CallOverrides): Promise<BigNumber[]>

  getUnstakeCount(
    user: string,
    beneficiary: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUnstakedAmount(
    user: string,
    beneficiary: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUnstakedSLM(
    user: string,
    beneficiary: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUnstakedTime(
    user: string,
    beneficiary: BigNumberish,
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getUserId(walletAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  getVoteEndTime(dispute: string, overrides?: CallOverrides): Promise<BigNumber>

  getVoteHistoryCount(
    user: string,
    beneficiary: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  increaseDisputeVoteCount(
    amount: BigNumberish,
    dispute: string,
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  increaseOutstandingVotes(
    amount: BigNumberish,
    user: string,
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  increaseStakeAmount(
    user: string,
    beneficiary: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  increaseVoteHistoryCount(
    amount: BigNumberish,
    user: string,
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  outstandingVotes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  pushUnstakedInfo(
    user: string,
    beneficiary: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  sendFunds(
    user: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setMinStake(
    newMinStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setStakerManager(
    newStakerManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setUnstakePeriod(
    periodDays: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setUserId(
    walletAddress: string,
    userId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setVoteEndTime(
    dispute: string,
    voteEndTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stakerPool(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  stakes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  unstakePeriod(overrides?: CallOverrides): Promise<BigNumber>

  unstakedSLM(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; time: BigNumber }>

  updateStakerPool(
    newStakerPool: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  updateUnstakedInfo(
    user: string,
    beneficiary: BigNumberish,
    index: BigNumberish,
    amount: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  userIdList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  voteEndTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  voteHistoryCount(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  callStatic: {
    addressLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    decreaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    decreaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    decreaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    decreaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    deleteUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    disputeVoteCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDisputeVoteCount(
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getOutstandingVotes(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStake(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStakerPool(managerAddress: string, overrides?: CallOverrides): Promise<BigNumber[]>

    getUnstakeCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUnstakedAmount(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUnstakedSLM(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUnstakedTime(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<string>

    getUserId(walletAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    getVoteEndTime(dispute: string, overrides?: CallOverrides): Promise<BigNumber>

    getVoteHistoryCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    increaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    increaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    increaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    outstandingVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    pushUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    sendFunds(
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setMinStake(newMinStake: BigNumberish, overrides?: CallOverrides): Promise<void>

    setStakerManager(newStakerManager: string, overrides?: CallOverrides): Promise<void>

    setUnstakePeriod(periodDays: BigNumberish, overrides?: CallOverrides): Promise<void>

    setUserId(
      walletAddress: string,
      userId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    setVoteEndTime(
      dispute: string,
      voteEndTimestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    stakerPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    unstakePeriod(overrides?: CallOverrides): Promise<BigNumber>

    unstakedSLM(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; time: BigNumber }>

    updateStakerPool(
      newStakerPool: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<void>

    updateUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    userIdList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    voteEndTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    voteHistoryCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>
  }

  estimateGas: {
    addressLookup(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    decreaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    decreaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    decreaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    decreaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    deleteUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    disputeVoteCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getDisputeVoteCount(
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getOutstandingVotes(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStake(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getStakerPool(managerAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    getUnstakeCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUnstakedAmount(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUnstakedSLM(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUnstakedTime(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getUserId(walletAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    getVoteEndTime(dispute: string, overrides?: CallOverrides): Promise<BigNumber>

    getVoteHistoryCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    increaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    increaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    increaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    increaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    outstandingVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    pushUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    sendFunds(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setMinStake(
      newMinStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setStakerManager(
      newStakerManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setUnstakePeriod(
      periodDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setUserId(
      walletAddress: string,
      userId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setVoteEndTime(
      dispute: string,
      voteEndTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stakerPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    unstakePeriod(overrides?: CallOverrides): Promise<BigNumber>

    unstakedSLM(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    updateStakerPool(
      newStakerPool: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    updateUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    userIdList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    voteEndTimes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    voteHistoryCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addressLookup(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    decreaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    decreaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    decreaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    decreaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    deleteUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    disputeVoteCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getDisputeVoteCount(
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getOutstandingVotes(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStake(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getStakerPool(
      managerAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUnstakeCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUnstakedAmount(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUnstakedSLM(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUnstakedTime(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserAddress(
      userId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserId(
      walletAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getVoteEndTime(
      dispute: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getVoteHistoryCount(
      user: string,
      beneficiary: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    increaseDisputeVoteCount(
      amount: BigNumberish,
      dispute: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    increaseOutstandingVotes(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    increaseStakeAmount(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    increaseVoteHistoryCount(
      amount: BigNumberish,
      user: string,
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    outstandingVotes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    pushUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    sendFunds(
      user: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setMinStake(
      newMinStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setStakerManager(
      newStakerManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setUnstakePeriod(
      periodDays: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setUserId(
      walletAddress: string,
      userId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setVoteEndTime(
      dispute: string,
      voteEndTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stakerPool(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    stakes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    unstakePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>

    unstakedSLM(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    updateStakerPool(
      newStakerPool: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    updateUnstakedInfo(
      user: string,
      beneficiary: BigNumberish,
      index: BigNumberish,
      amount: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    userIdList(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    voteEndTimes(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    voteHistoryCount(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
