/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface SlmStakerManagerInterface extends ethers.utils.Interface {
  functions: {
    'getStakerPool()': FunctionFragment
    'getUserAddress(uint256)': FunctionFragment
    'getUserId(address)': FunctionFragment
    'judgement()': FunctionFragment
    'setJudgementContract(address)': FunctionFragment
    'setVoteDetails(address,uint256)': FunctionFragment
    'stake(uint256,uint256)': FunctionFragment
    'stakerPool(uint256)': FunctionFragment
    'stakerStorage()': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unstake(uint256)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'getStakerPool', values?: undefined): string
  encodeFunctionData(functionFragment: 'getUserAddress', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'getUserId', values: [string]): string
  encodeFunctionData(functionFragment: 'judgement', values?: undefined): string
  encodeFunctionData(functionFragment: 'setJudgementContract', values: [string]): string
  encodeFunctionData(
    functionFragment: 'setVoteDetails',
    values: [string, BigNumberish],
  ): string
  encodeFunctionData(
    functionFragment: 'stake',
    values: [BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'stakerPool', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'stakerStorage', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string
  encodeFunctionData(functionFragment: 'unstake', values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: 'getStakerPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getUserId', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'judgement', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setJudgementContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setVoteDetails', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerPool', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakerStorage', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unstake', data: BytesLike): Result

  events: {
    'OwnershipTransferred(address,address)': EventFragment
    'StakedSLM(uint256,uint256,address)': EventFragment
    'UnstakeSLM(uint256,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StakedSLM'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'UnstakeSLM'): EventFragment
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export type StakedSLMEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    amount: BigNumber
    beneficiary: BigNumber
    user: string
  }
>

export type UnstakeSLMEvent = TypedEvent<
  [BigNumber, BigNumber, string] & {
    amount: BigNumber
    beneficiary: BigNumber
    user: string
  }
>

export class SlmStakerManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SlmStakerManagerInterface

  functions: {
    getStakerPool(overrides?: CallOverrides): Promise<[BigNumber[]]>

    getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getUserId(walletAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    judgement(overrides?: CallOverrides): Promise<[string]>

    setJudgementContract(
      judgementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    setVoteDetails(
      disputeAddress: string,
      endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stake(
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    stakerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    stakerStorage(overrides?: CallOverrides): Promise<[string]>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    unstake(
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  getStakerPool(overrides?: CallOverrides): Promise<BigNumber[]>

  getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<string>

  getUserId(walletAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  judgement(overrides?: CallOverrides): Promise<string>

  setJudgementContract(
    judgementAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  setVoteDetails(
    disputeAddress: string,
    endTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stake(
    beneficiary: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  stakerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  stakerStorage(overrides?: CallOverrides): Promise<string>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  unstake(
    beneficiary: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    getStakerPool(overrides?: CallOverrides): Promise<BigNumber[]>

    getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<string>

    getUserId(walletAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    judgement(overrides?: CallOverrides): Promise<string>

    setJudgementContract(
      judgementAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>

    setVoteDetails(
      disputeAddress: string,
      endTime: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    stake(
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    stakerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    stakerStorage(overrides?: CallOverrides): Promise<string>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    unstake(beneficiary: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    'StakedSLM(uint256,uint256,address)'(
      amount?: null,
      beneficiary?: null,
      user?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { amount: BigNumber; beneficiary: BigNumber; user: string }
    >

    StakedSLM(
      amount?: null,
      beneficiary?: null,
      user?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { amount: BigNumber; beneficiary: BigNumber; user: string }
    >

    'UnstakeSLM(uint256,uint256,address)'(
      amount?: null,
      beneficiary?: null,
      user?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { amount: BigNumber; beneficiary: BigNumber; user: string }
    >

    UnstakeSLM(
      amount?: null,
      beneficiary?: null,
      user?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { amount: BigNumber; beneficiary: BigNumber; user: string }
    >
  }

  estimateGas: {
    getStakerPool(overrides?: CallOverrides): Promise<BigNumber>

    getUserAddress(userId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getUserId(walletAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    judgement(overrides?: CallOverrides): Promise<BigNumber>

    setJudgementContract(
      judgementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    setVoteDetails(
      disputeAddress: string,
      endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stake(
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    stakerPool(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    stakerStorage(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    unstake(
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getStakerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getUserAddress(
      userId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getUserId(
      walletAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    judgement(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setJudgementContract(
      judgementAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    setVoteDetails(
      disputeAddress: string,
      endTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stake(
      beneficiary: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    stakerPool(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    stakerStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    unstake(
      beneficiary: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
