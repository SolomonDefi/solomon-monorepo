/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface SlmFactoryInterface extends ethers.utils.Interface {
  functions: {
    'createChargeback(address,address,address)': FunctionFragment
    'createEscrow(address,address,address)': FunctionFragment
    'createPreorder(address,address,address)': FunctionFragment
    'judge()': FunctionFragment
    'masterContract()': FunctionFragment
    'slmDiscount()': FunctionFragment
    'slmToken()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'createChargeback',
    values: [string, string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'createEscrow',
    values: [string, string, string],
  ): string
  encodeFunctionData(
    functionFragment: 'createPreorder',
    values: [string, string, string],
  ): string
  encodeFunctionData(functionFragment: 'judge', values?: undefined): string
  encodeFunctionData(functionFragment: 'masterContract', values?: undefined): string
  encodeFunctionData(functionFragment: 'slmDiscount', values?: undefined): string
  encodeFunctionData(functionFragment: 'slmToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

  decodeFunctionResult(functionFragment: 'createChargeback', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createEscrow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'createPreorder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'judge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'masterContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'slmDiscount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'slmToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'ChargebackCreated(address)': EventFragment
    'EscrowCreated(address)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'PreorderCreated(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ChargebackCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'EscrowCreated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PreorderCreated'): EventFragment
}

export type ChargebackCreatedEvent = TypedEvent<[string] & { chargebackAddress: string }>

export type EscrowCreatedEvent = TypedEvent<[string] & { escrowAddress: string }>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export type PreorderCreatedEvent = TypedEvent<[string] & { preorderAddress: string }>

export class SlmFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SlmFactoryInterface

  functions: {
    createChargeback(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    createEscrow(
      party1: string,
      party2: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    createPreorder(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    judge(overrides?: CallOverrides): Promise<[string]>

    masterContract(overrides?: CallOverrides): Promise<[string]>

    slmDiscount(overrides?: CallOverrides): Promise<[number]>

    slmToken(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  createChargeback(
    merchant: string,
    buyer: string,
    paymentToken: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  createEscrow(
    party1: string,
    party2: string,
    paymentToken: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  createPreorder(
    merchant: string,
    buyer: string,
    paymentToken: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  judge(overrides?: CallOverrides): Promise<string>

  masterContract(overrides?: CallOverrides): Promise<string>

  slmDiscount(overrides?: CallOverrides): Promise<number>

  slmToken(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    createChargeback(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: CallOverrides,
    ): Promise<void>

    createEscrow(
      party1: string,
      party2: string,
      paymentToken: string,
      overrides?: CallOverrides,
    ): Promise<void>

    createPreorder(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: CallOverrides,
    ): Promise<void>

    judge(overrides?: CallOverrides): Promise<string>

    masterContract(overrides?: CallOverrides): Promise<string>

    slmDiscount(overrides?: CallOverrides): Promise<number>

    slmToken(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'ChargebackCreated(address)'(
      chargebackAddress?: null,
    ): TypedEventFilter<[string], { chargebackAddress: string }>

    ChargebackCreated(
      chargebackAddress?: null,
    ): TypedEventFilter<[string], { chargebackAddress: string }>

    'EscrowCreated(address)'(
      escrowAddress?: null,
    ): TypedEventFilter<[string], { escrowAddress: string }>

    EscrowCreated(
      escrowAddress?: null,
    ): TypedEventFilter<[string], { escrowAddress: string }>

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    'PreorderCreated(address)'(
      preorderAddress?: null,
    ): TypedEventFilter<[string], { preorderAddress: string }>

    PreorderCreated(
      preorderAddress?: null,
    ): TypedEventFilter<[string], { preorderAddress: string }>
  }

  estimateGas: {
    createChargeback(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    createEscrow(
      party1: string,
      party2: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    createPreorder(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    judge(overrides?: CallOverrides): Promise<BigNumber>

    masterContract(overrides?: CallOverrides): Promise<BigNumber>

    slmDiscount(overrides?: CallOverrides): Promise<BigNumber>

    slmToken(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    createChargeback(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    createEscrow(
      party1: string,
      party2: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    createPreorder(
      merchant: string,
      buyer: string,
      paymentToken: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    judge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    masterContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

    slmDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    slmToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
