/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import type { TypedEventFilter, TypedEvent, TypedListener } from './common'

interface SlmPreorderInterface extends ethers.utils.Interface {
  functions: {
    'buyer()': FunctionFragment
    'buyerEvidenceURL()': FunctionFragment
    'buyerWithdraw()': FunctionFragment
    'discount()': FunctionFragment
    'disputePeriod()': FunctionFragment
    'disputeTime()': FunctionFragment
    'initializePreorder(address,address,address,address,uint8)': FunctionFragment
    'judge()': FunctionFragment
    'merchant()': FunctionFragment
    'merchantEvidence(string)': FunctionFragment
    'merchantEvidenceURL()': FunctionFragment
    'merchantWithdraw()': FunctionFragment
    'requestRefund(string)': FunctionFragment
    'state()': FunctionFragment
    'token()': FunctionFragment
    'transferOwnership(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'buyer', values?: undefined): string
  encodeFunctionData(functionFragment: 'buyerEvidenceURL', values?: undefined): string
  encodeFunctionData(functionFragment: 'buyerWithdraw', values?: undefined): string
  encodeFunctionData(functionFragment: 'discount', values?: undefined): string
  encodeFunctionData(functionFragment: 'disputePeriod', values?: undefined): string
  encodeFunctionData(functionFragment: 'disputeTime', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initializePreorder',
    values: [string, string, string, string, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'judge', values?: undefined): string
  encodeFunctionData(functionFragment: 'merchant', values?: undefined): string
  encodeFunctionData(functionFragment: 'merchantEvidence', values: [string]): string
  encodeFunctionData(functionFragment: 'merchantEvidenceURL', values?: undefined): string
  encodeFunctionData(functionFragment: 'merchantWithdraw', values?: undefined): string
  encodeFunctionData(functionFragment: 'requestRefund', values: [string]): string
  encodeFunctionData(functionFragment: 'state', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string

  decodeFunctionResult(functionFragment: 'buyer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyerEvidenceURL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyerWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'discount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disputePeriod', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disputeTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initializePreorder', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'judge', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merchant', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merchantEvidence', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merchantEvidenceURL', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'merchantWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'requestRefund', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'state', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

  events: {
    'DisputeInitiated(address,address)': EventFragment
    'Evidence(address,string)': EventFragment
    'Funded(uint256)': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'DisputeInitiated'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Evidence'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Funded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export type DisputeInitiatedEvent = TypedEvent<
  [string, string] & { party1: string; party2: string }
>

export type EvidenceEvent = TypedEvent<
  [string, string] & { party: string; evidenceURL: string }
>

export type FundedEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>

export class SlmPreorder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: SlmPreorderInterface

  functions: {
    buyer(overrides?: CallOverrides): Promise<[string]>

    buyerEvidenceURL(overrides?: CallOverrides): Promise<[string]>

    buyerWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    discount(overrides?: CallOverrides): Promise<[number]>

    disputePeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    disputeTime(overrides?: CallOverrides): Promise<[BigNumber]>

    initializePreorder(
      _judge: string,
      _token: string,
      _merchant: string,
      _buyer: string,
      _discount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    judge(overrides?: CallOverrides): Promise<[string]>

    merchant(overrides?: CallOverrides): Promise<[string]>

    merchantEvidence(
      _evidenceURL: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    merchantEvidenceURL(overrides?: CallOverrides): Promise<[string]>

    merchantWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    requestRefund(
      _evidenceURL: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    state(overrides?: CallOverrides): Promise<[number]>

    token(overrides?: CallOverrides): Promise<[string]>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>
  }

  buyer(overrides?: CallOverrides): Promise<string>

  buyerEvidenceURL(overrides?: CallOverrides): Promise<string>

  buyerWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  discount(overrides?: CallOverrides): Promise<number>

  disputePeriod(overrides?: CallOverrides): Promise<BigNumber>

  disputeTime(overrides?: CallOverrides): Promise<BigNumber>

  initializePreorder(
    _judge: string,
    _token: string,
    _merchant: string,
    _buyer: string,
    _discount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  judge(overrides?: CallOverrides): Promise<string>

  merchant(overrides?: CallOverrides): Promise<string>

  merchantEvidence(
    _evidenceURL: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  merchantEvidenceURL(overrides?: CallOverrides): Promise<string>

  merchantWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  requestRefund(
    _evidenceURL: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  state(overrides?: CallOverrides): Promise<number>

  token(overrides?: CallOverrides): Promise<string>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    buyer(overrides?: CallOverrides): Promise<string>

    buyerEvidenceURL(overrides?: CallOverrides): Promise<string>

    buyerWithdraw(overrides?: CallOverrides): Promise<void>

    discount(overrides?: CallOverrides): Promise<number>

    disputePeriod(overrides?: CallOverrides): Promise<BigNumber>

    disputeTime(overrides?: CallOverrides): Promise<BigNumber>

    initializePreorder(
      _judge: string,
      _token: string,
      _merchant: string,
      _buyer: string,
      _discount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>

    judge(overrides?: CallOverrides): Promise<string>

    merchant(overrides?: CallOverrides): Promise<string>

    merchantEvidence(_evidenceURL: string, overrides?: CallOverrides): Promise<void>

    merchantEvidenceURL(overrides?: CallOverrides): Promise<string>

    merchantWithdraw(overrides?: CallOverrides): Promise<void>

    requestRefund(_evidenceURL: string, overrides?: CallOverrides): Promise<void>

    state(overrides?: CallOverrides): Promise<number>

    token(overrides?: CallOverrides): Promise<string>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'DisputeInitiated(address,address)'(
      party1?: string | null,
      party2?: string | null,
    ): TypedEventFilter<[string, string], { party1: string; party2: string }>

    DisputeInitiated(
      party1?: string | null,
      party2?: string | null,
    ): TypedEventFilter<[string, string], { party1: string; party2: string }>

    'Evidence(address,string)'(
      party?: string | null,
      evidenceURL?: null,
    ): TypedEventFilter<[string, string], { party: string; evidenceURL: string }>

    Evidence(
      party?: string | null,
      evidenceURL?: null,
    ): TypedEventFilter<[string, string], { party: string; evidenceURL: string }>

    'Funded(uint256)'(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>

    Funded(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>
  }

  estimateGas: {
    buyer(overrides?: CallOverrides): Promise<BigNumber>

    buyerEvidenceURL(overrides?: CallOverrides): Promise<BigNumber>

    buyerWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    discount(overrides?: CallOverrides): Promise<BigNumber>

    disputePeriod(overrides?: CallOverrides): Promise<BigNumber>

    disputeTime(overrides?: CallOverrides): Promise<BigNumber>

    initializePreorder(
      _judge: string,
      _token: string,
      _merchant: string,
      _buyer: string,
      _discount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    judge(overrides?: CallOverrides): Promise<BigNumber>

    merchant(overrides?: CallOverrides): Promise<BigNumber>

    merchantEvidence(
      _evidenceURL: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    merchantEvidenceURL(overrides?: CallOverrides): Promise<BigNumber>

    merchantWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    requestRefund(
      _evidenceURL: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    state(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    buyer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyerEvidenceURL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    buyerWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    discount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    disputePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>

    disputeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initializePreorder(
      _judge: string,
      _token: string,
      _merchant: string,
      _buyer: string,
      _discount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    judge(overrides?: CallOverrides): Promise<PopulatedTransaction>

    merchant(overrides?: CallOverrides): Promise<PopulatedTransaction>

    merchantEvidence(
      _evidenceURL: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    merchantEvidenceURL(overrides?: CallOverrides): Promise<PopulatedTransaction>

    merchantWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    requestRefund(
      _evidenceURL: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>
  }
}
