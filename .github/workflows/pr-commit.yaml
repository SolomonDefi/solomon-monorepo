name: PR Commit

on:
  pull_request:
    branches: [main]

jobs:
  check-format:
    name: Check Format
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code into workspace directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up NodeJS (v14)
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.0.2
      - name: Install modules
        run: pnpm i
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
      - name: Setup api-evidence
        uses: ./.github/actions/setup-python-app
        with:
          app-name: 'api-evidence'
          create-db: false
      - name: Setup api-dispute
        uses: ./.github/actions/setup-python-app
        with:
          app-name: 'api-dispute'
          create-db: false
      - name: Check Python code format
        run: pnpx nx run-many --target=format --check --all --parallel
      - name: Check code format
        run: pnpx nx format:check --base=origin/main

  lint:
    name: Lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code into workspace directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up NodeJS (v14)
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.0.2
      - name: Install modules
        run: pnpm i
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
      - name: Checkout code into workspace directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup api-evidence
        uses: ./.github/actions/setup-python-app
        with:
          app-name: 'api-evidence'
          create-db: false
      - name: Setup api-dispute
        uses: ./.github/actions/setup-python-app
        with:
          app-name: 'api-dispute'
          create-db: false
      - name: Lint source code
        run: pnpx nx affected:lint --base=origin/main --parallel
  # TODO
  #      - name: Lint commits
  #        run: pnpx commitlint --verbose --from=origin/main

  # build-docker-watcher:
  #   name: Blockchain Watcher Image
  #   runs-on: ubuntu-20.04
  #   env:
  #     APP_NAME: blockchain-watcher
  #   steps:
  #     - name: Get last commit short SHA
  #       id: slug
  #       run: echo "::set-output name=sha7::$(echo ${{github.event.pull_request.head.sha}} | cut -c1-7)"
  #     - name: Checkout code into workspace directory
  #       uses: actions/checkout@v2
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Build docker image
  #       id: docker_build
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: ${{env.WORKSPACE_ROOT}}
  #         push: false
  #         file: ${{env.WORKSPACE_ROOT}}/apps/blockchain-watcher/Dockerfile
  #         target: production
  #         tags: ${{env.APP_NAME}}-${{github.head_ref}}-${{steps.slug.outputs.sha7}}

  build-apps:
    name: Build Apps
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code into workspace directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Setup Node.js env
      - name: Set up NodeJS (v16)
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.0.2
      - name: Install modules
        run: pnpm i
      - name: Build plugin
        run: pnpx nx build plugin

      # Setup Python env
      - uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.11

      # Generate files
      - name: Generate contract TypeScript definition
        run: pnpx nx run contracts:generate-type
      - name: Generate event JSON schema
        run: pnpx nx run api-dispute:generate-event-schema
      - name: Generate event interface
        run: pnpx nx run blockchain-watcher:generate-event-interface

      - name: Build apps
        run: pnpx nx affected:build --base=origin/main --parallel

  test:
    name: Unit Tests
    runs-on: ubuntu-20.04
    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code into workspace directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up NodeJS (v16)
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Cache pnpm modules
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6.0.2
      - name: Install modules
        run: pnpm i
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py | python -
      - name: Checkout code into workspace directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup api-evidence
        uses: ./.github/actions/setup-python-app
        with:
          app-name: 'api-evidence'
          create-db: true
      - name: Setup api-dispute
        uses: ./.github/actions/setup-python-app
        with:
          app-name: 'api-dispute'
          create-db: true
      - name: Run unit tests
        run: pnpx nx affected:test --base=origin/main --parallel
## Not ready yet
#  e2e:
#    name: E2E Tests
#    runs-on: ubuntu-20.04
#    steps:
#      - name: Checkout code into workspace directory
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#      - name: Set up NodeJS (v16)
#        uses: actions/setup-node@v2
#        with:
#          node-version: '16'
#      - name: Cache pnpm modules
#        uses: actions/cache@v2
#        with:
#          path: ~/.pnpm-store
#          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
#          restore-keys: |
#            ${{ runner.os }}-
#      - uses: pnpm/action-setup@v2.0.1
#        with:
#          version: 6.0.2
#      - name: Install npm modules
#        run: pnpm i
#      - name: Run E2E tests
#        run: pnpx nx affected:e2e --base=origin/main
