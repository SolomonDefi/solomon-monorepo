import{o as e,c as t,d as a}from"./app.5e88432e.js";const o='{"title":"Commit Message Format","description":"","frontmatter":{},"headers":[{"level":2,"title":"Commit Message Format","slug":"commit-message-format"},{"level":2,"title":"Commit Message Header","slug":"commit-message-header"},{"level":3,"title":"Scopes","slug":"scopes"},{"level":3,"title":"Projects","slug":"projects"},{"level":3,"title":"Summary","slug":"summary"},{"level":2,"title":"Commit Message Body","slug":"commit-message-body"},{"level":2,"title":"Commit Message Footer","slug":"commit-message-footer"},{"level":2,"title":"Revert Commits","slug":"revert-commits"},{"level":2,"title":"Examples","slug":"examples"}],"relativePath":"guide/commit-format.md","lastUpdated":1631952569468}',i={},s=[a('<h2 id="commit-message-format" tabindex="-1">Commit Message Format <a class="header-anchor" href="#commit-message-format" aria-hidden="true">#</a></h2><p>This specification is inspired by <a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#-commit-message-format" target="_blank" rel="noopener noreferrer">Angular&#39;s Commit Message Guidelines</a>. We have precise rules over how our Git commit messages must be formatted. This format leads to easier to read commit history. It also allows automatically generated, human readable, changelogs.</p><p>Each commit message consists of a header, a body, and a footer.</p><div class="language-"><pre><code>&lt;scope&gt; [&lt;project&gt;]: &lt;short-summary&gt; #&lt;issue-number&gt;\n</code></pre></div><p>Any line of the commit message cannot be longer than 100 characters.</p><h2 id="commit-message-header" tabindex="-1">Commit Message Header <a class="header-anchor" href="#commit-message-header" aria-hidden="true">#</a></h2><div class="language-"><pre><code>\n&lt;scope&gt;[&lt;project&gt;]: &lt;short summary&gt; #&lt;issue-number&gt;\n  |       |             |               └─⫸ Reference to corresponding issue\n  │       │             │\n  │       │             └─⫸ Summary in present tense. Not capitalized. No period at the end.\n  │       │\n  │       └─⫸ The app or library where the majority of changes occurred\n  │\n  └─⫸ Commit Scope: Emoji representing the type of work done\n</code></pre></div><h3 id="scopes" tabindex="-1">Scopes <a class="header-anchor" href="#scopes" aria-hidden="true">#</a></h3><p>TODO</p><h3 id="projects" tabindex="-1">Projects <a class="header-anchor" href="#projects" aria-hidden="true">#</a></h3><p><code>root</code> refers to changes that affect monorepo operation, and arent specifict</p><ul><li>root</li><li>mailer</li><li>evidence</li><li>contracts</li><li>docs</li></ul><h3 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-hidden="true">#</a></h3><p>Use the summary field to provide a succinct description of the change:</p><ul><li>use the imperative, present tense: &quot;change&quot; not &quot;changed&quot; nor &quot;changes&quot;</li><li>don&#39;t capitalize the first letter</li><li>no dot (.) at the end</li></ul><h2 id="commit-message-body" tabindex="-1">Commit Message Body <a class="header-anchor" href="#commit-message-body" aria-hidden="true">#</a></h2><p>Just as in the summary, use the imperative, present tense: &quot;fix&quot; not &quot;fixed&quot; nor &quot;fixes&quot;.</p><p>Explain the motivation for the change in the commit message body. This commit message should explain why you are making the change. You can include a comparison of the previous behavior with the new behavior in order to illustrate the impact of the change. You can also add any minor details that don&#39;t fit in the summary.</p><h2 id="commit-message-footer" tabindex="-1">Commit Message Footer <a class="header-anchor" href="#commit-message-footer" aria-hidden="true">#</a></h2><p>The footer can contain information about breaking changes and is also the place to reference GitHub issues/stories and other PRs that this commit closes or is related to.</p><div class="language-"><pre><code>BREAKING CHANGE: &lt;breaking change summary&gt;\n&lt;BLANK LINE&gt;\n&lt;breaking change description + migration instructions&gt;\n&lt;BLANK LINE&gt;\n&lt;BLANK LINE&gt;\nCloses #&lt;issue number&gt;\n</code></pre></div><p>Breaking Change section should start with the phrase &quot;BREAKING CHANGE: &quot; followed by a summary of the breaking change, a blank line, and a detailed description of the breaking change that also includes migration instructions.</p><h2 id="revert-commits" tabindex="-1">Revert Commits <a class="header-anchor" href="#revert-commits" aria-hidden="true">#</a></h2><p>If the commit reverts a previous commit, it should begin with revert: , followed by the header of the reverted commit.</p><p>The content of the commit message body should contain:</p><ul><li>information about the SHA of the commit being reverted in the following format: <code>This reverts commit &lt;SHA&gt;</code>,</li><li>a clear description of the reason for reverting the commit message.</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-hidden="true">#</a></h2><div class="language-sh"><pre><code># A PR commit not associated with any issue/story\n$ git commit -m &#39;:fix: [docs]: fix typo #1&#39;\n</code></pre></div><div class="language-sh"><pre><code># A PR commit with changes limited to a particular scope\n$ git commit -m &#39;:fix: [api]: add missing field to user endpoint response #2&#39;\n</code></pre></div><div class="language-sh"><pre><code># A PR commit that will close an open issue in the same repo as the issue\n$ git commit -m &#39;:wrench: [root]: add commit lint check #7\n\nCloses #7&#39;\n</code></pre></div>',30)];i.render=function(a,o,i,r,n,m){return e(),t("div",null,s)};export{o as __pageData,i as default};
